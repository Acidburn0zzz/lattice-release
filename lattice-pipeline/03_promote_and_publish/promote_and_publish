#!/bin/bash

set -e

setup_ssh_access_to_github() {
    echo "Running ssh-agent"
    eval `ssh-agent`
    aws s3 cp s3://lattice-gocd/credentials/ci_key ci_key
    chmod 600 ci_key
    ssh-add ci_key
}

sync_up_tags_off_remote() {
    pushd $LATTICE_SRC_PATH > /dev/null
        git tag -l | xargs git tag -d
        git fetch --tags
    popd > /dev/null
}

upload_lattice_tar_to_s3() {
    aws s3 cp $lattice_tar_path "s3://lattice/unstable/latest/lattice.tgz"
    aws s3 cp $lattice_tar_path "s3://lattice/unstable/${lattice_version}/lattice.tgz"
    echo "lattice.tgz uploaded to s3"
}

upload_ltc_binaries_to_s3() {
    rm -rf ltc-binaries
    mkdir -p ltc-binaries
    tar xzf ltc.tar.gz -C ltc-binaries
    ltc_checksum=$(cat ltc-binaries/ltc-checksum)
    echo "Unpacked ltc.tar.gz with ltc-checksum (git sha) = ${ltc_checksum}"

    if [ "${ltc_checksum}" != "${GO_REVISION_LATTICE}" ]; then
        echo "Mismatch on ltc-checksum SHA (ltc.tar.gz/gocd) :: ${ltc_checksum}/${GO_REVISION_LATTICE}"
    fi

    sync

    aws s3 cp ltc-binaries/ltc-darwin-amd64 "s3://lattice/unstable/latest/darwin-amd64/ltc"
    aws s3 cp ltc-binaries/ltc-linux-amd64 "s3://lattice/unstable/latest/linux-amd64/ltc"
    aws s3 cp ltc-binaries/ltc-checksum "s3://lattice/unstable/latest/ltc-checksum"

    aws s3 cp ltc-binaries/ltc-darwin-amd64 "s3://lattice/unstable/${lattice_version}/darwin-amd64/ltc"
    aws s3 cp ltc-binaries/ltc-linux-amd64 "s3://lattice/unstable/${lattice_version}/linux-amd64/ltc"
    aws s3 cp ltc-binaries/ltc-checksum "s3://lattice/unstable/${lattice_version}/ltc-checksum"
    ## TODO: What do we do with the ltc-checksum now?

    echo "ltc binaries uploaded to s3"
}

update_godeps(){
    setup_go_env

    construct_ltc_gopath

    echo "Removing $LATTICE_SRC_PATH/ltc/Godeps folder"
    rm -rf $LATTICE_SRC_PATH/ltc/Godeps

    echo "Saving off ltc Godeps from constructed GOPATH .."
    pushd $GOPATH/src/github.com/cloudfoundry-incubator/lattice/ltc > /dev/null
        godep save && echo "godep saved"
        sync

        echo -n "Copying ltc/Godeps from $(pwd) to $LATTICE_SRC_PATH/ltc .."
        cp -a Godeps $LATTICE_SRC_PATH/ltc/ && echo "DONE!"
    popd > /dev/null

    echo "== Godeps Json - BEGIN =="
    cat $LATTICE_SRC_PATH/ltc/Godeps/Godeps.json
    echo "== Godeps Json - END =="

    pushd $LATTICE_SRC_PATH/ltc > /dev/null
        git add Godeps

        if [ $(git diff --cached --numstat -- Godeps/ | wc -l) -gt 0 ]; then
            git commit -m "Update ltc Godeps

            Diego Release Git SHA: ${diego_release_git_sha}

            +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
            "
        fi
    popd > /dev/null
}

extract_deliver_stories_message() {
    git log origin/master..$GO_REVISION_LATTICE | \
        egrep -io "\[\s*(?:Finishes|Fixes)\s*(#(\d+)\s*)+\]" | \
        perl -p -e 's/\[\s*(?:Finishes|Fixes)\s*((?:#[0-9]+\s*)+)\]/\[Delivers $1\]/gi'
}

## assumes master branch checked out
bump_version(){
    previous_lattice_version=$(cat Version)
    new_lattice_version=$((previous_lattice_version+1))

    echo "$new_lattice_version" > Version
    echo "Updating Version file: $previous_lattice_version -> $new_lattice_version"

    echo "${diego_release_git_sha}" > DIEGO_VERSION

    git add Version
    git add DIEGO_VERSION
    deliver_stories_message=$(extract_deliver_stories_message)

    git commit -m "Bump Version: $previous_lattice_version -> $new_lattice_version

    Diego Release Git SHA: ${diego_release_git_sha}

    $deliver_stories_message

    +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
    "

}

bump_and_push_lattice() {
    pushd diego-release > /dev/null
        diego_release_git_sha="$(git rev-parse HEAD)" && echo "diego_release_git_sha=${diego_release_git_sha}"
    popd > /dev/null

    if [ "$diego_release_git_sha" != "$GO_REVISION_DIEGO_RELEASE" ]; then
        echo "Mismatch on diego-release SHA (git/gocd) :: ${diego_release_git_sha}/${GO_REVISION_DIEGO_RELEASE}"
    fi

    pushd diego-release/src/github.com/cloudfoundry-incubator/lattice > /dev/null
        git pull origin master
        git checkout master

        # Most of the time this will be a ff-only merge.
        # It won't be if there is a change to master, eg a README change or a PR merged directly into master
        # that hasn't made it back to develop yet.
        echo "merging develop into master"
        git merge develop -m "Merge branch 'develop' of github.com:cloudfoundry-incubator/lattice into master

        +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
        "

        update_godeps
        bump_version

        git checkout develop

        echo "merging master into develop"

        git merge master -m "Merge branch 'master' of github.com:cloudfoundry-incubator/lattice into develop

        +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
        "

        # Rebase in case there have been changes to origin/develop since the beginning of this pipeline run.
        # we want to get our godeps bump and merge commit stuff merged back into develop on top of external changes.
        git pull --rebase origin develop
        git push origin master develop

        echo "Successfully pushed updates to origin/master & origin/develop"
    popd > /dev/null
}

source $(dirname $0)/../helpers/build_ltc_helpers

lattice_tar_path=$1

setup_ssh_access_to_github

sync_up_tags_off_remote
get_lattice_version

upload_lattice_tar_to_s3
upload_ltc_binaries_to_s3

bump_and_push_lattice
