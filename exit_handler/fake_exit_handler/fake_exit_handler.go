// This file was generated by counterfeiter
package fake_exit_handler

import (
	"sync"

	"github.com/pivotal-cf-experimental/lattice-cli/exit_handler"
)

type FakeExitHandler struct {
	RunStub        func()
	runMutex       sync.RWMutex
	runArgsForCall []struct{}
	OnExitStub        func(exitFunc func())
	onExitMutex       sync.RWMutex
	onExitArgsForCall []struct {
		exitFunc func()
	}
	ExitStub        func(code int)
	exitMutex       sync.RWMutex
	exitArgsForCall []struct {
		code int
	}
}

func (fake *FakeExitHandler) Run() {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct{}{})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		fake.RunStub()
	}
}

func (fake *FakeExitHandler) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeExitHandler) OnExit(exitFunc func()) {
	fake.onExitMutex.Lock()
	fake.onExitArgsForCall = append(fake.onExitArgsForCall, struct {
		exitFunc func()
	}{exitFunc})
	fake.onExitMutex.Unlock()
	if fake.OnExitStub != nil {
		fake.OnExitStub(exitFunc)
	}
}

func (fake *FakeExitHandler) OnExitCallCount() int {
	fake.onExitMutex.RLock()
	defer fake.onExitMutex.RUnlock()
	return len(fake.onExitArgsForCall)
}

func (fake *FakeExitHandler) OnExitArgsForCall(i int) func() {
	fake.onExitMutex.RLock()
	defer fake.onExitMutex.RUnlock()
	return fake.onExitArgsForCall[i].exitFunc
}

func (fake *FakeExitHandler) Exit(code int) {
	fake.exitMutex.Lock()
	fake.exitArgsForCall = append(fake.exitArgsForCall, struct {
		code int
	}{code})
	fake.exitMutex.Unlock()
	if fake.ExitStub != nil {
		fake.ExitStub(code)
	}
}

func (fake *FakeExitHandler) ExitCallCount() int {
	fake.exitMutex.RLock()
	defer fake.exitMutex.RUnlock()
	return len(fake.exitArgsForCall)
}

func (fake *FakeExitHandler) ExitArgsForCall(i int) int {
	fake.exitMutex.RLock()
	defer fake.exitMutex.RUnlock()
	return fake.exitArgsForCall[i].code
}

var _ exit_handler.ExitHandler = new(FakeExitHandler)
