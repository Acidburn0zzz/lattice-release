{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for MicroBOSH",
  "Mappings": {
    "SubnetConfig": {
      "Notifications": {"CIDR": "10.0.1.0/24"},
      "NotificationsUI": {"CIDR": "10.0.2.0/24"},
      "Private": {"CIDR": "10.0.16.0/24"},
      "Public": {"CIDR": "10.0.0.0/24"},
      "VPC": {"CIDR": "10.0.0.0/16"}
    }
  },
  "Outputs": {
    "AvailabilityZone": {
      "Description": "Availability zone of the subnet",
      "Value": {"Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]}
    },
    "DNSBosh": {
      "Description": "DNS Entry for MicroBOSH Elastic IP, e.g. bosh.stackname.hostedzone.com",
      "Value": {"Ref": "DNSRecordBOSH"}
    },
    "DNSELB": {
      "Description": "DNS Entry for ELB, e.g. *.stackname.hostedzone.com",
      "Value": {"Ref": "DNSRecordELB"}
    },
    "ElasticIP": {"Description": "Elastic IP", "Value": {"Ref": "EIP"}},
    "ElasticLoadBalancer": {
      "Description": "Name of the Elastic Load Balancer",
      "Value": {"Ref": "ElasticLoadBalancer"}
    },
    "NotificationsSubnetID": {
      "Description": "Subnet ID of the notifcations subnet",
      "Value": {"Ref": "NotificationsSubnet"}
    },
    "NotificationsUISubnetID": {
      "Description": "Subnet ID of the notifcations-ui subnet",
      "Value": {"Ref": "NotificationsUISubnet"}
    },
    "PrivateSubnetID": {
      "Description": "Subnet ID of the private subnet",
      "Value": {"Ref": "PrivateSubnet"}
    },
    "PublicSubnetID": {
      "Description": "Subnet ID of the public subnet",
      "Value": {"Ref": "PublicSubnet"}
    },
    "SNSTopicARN": {
      "Description": "ARN for SNS Topic for Detached ELB",
      "Value": {"Ref": "SNSELBDetachedCloudwatchTopic"}
    },
    "SecurityGroupID": {
      "Description": "ID of the security group",
      "Value": {"Ref": "EC2SecurityGroup"}
    },
    "VPCID": {
      "Description": "VPC ID of the newly created VPC",
      "Value": {"Ref": "VPC"}
    }
  },
  "Parameters": {
    "AllowedIPs": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "HostedZone": {
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a valid DNS zone name.",
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone",
      "Type": "String"
    },
    "NatAMI": {
      "ConstraintDescription": "must contain a valid AMI ID",
      "Description": "The AMI ID to use when booting the NAT instance",
      "Type": "String"
    },
    "SSLCertARN": {
      "ConstraintDescription": "must be a valid AWS ARN for a SSL Certificate",
      "Description": "The ARN of the SSL Certificate to put on the ELB",
      "Type": "String"
    }
  },
  "Resources": {
    "DNSRecordBOSH": {
      "Properties": {
        "Comment": "DNS name for the elastic IP",
        "HostedZoneName": {"Fn::Join": ["", [{"Ref": "HostedZone"}, "."]]},
        "Name": {
          "Fn::Join": [
            "",
            [
              "bosh.",
              {"Ref": "AWS::StackName"},
              ".",
              {"Ref": "HostedZone"},
              "."
            ]
          ]
        },
        "ResourceRecords": [{"Ref": "EIP"}],
        "TTL": "900",
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "DNSRecordELB": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": ["ElasticLoadBalancer", "CanonicalHostedZoneName"]
          },
          "HostedZoneId": {
            "Fn::GetAtt": ["ElasticLoadBalancer", "CanonicalHostedZoneNameID"]
          }
        },
        "Comment": "DNS name for the ELB",
        "HostedZoneName": {"Fn::Join": ["", [{"Ref": "HostedZone"}, "."]]},
        "Name": {
          "Fn::Join": [
            "",
            ["*.", {"Ref": "AWS::StackName"}, ".", {"Ref": "HostedZone"}, "."]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "EC2SecurityGroup": {
      "Properties": {
        "GroupDescription": "Enable access to the EC2 host",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "IpProtocol": "-1",
            "ToPort": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {"Ref": "AllowedIPs"},
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": {"Ref": "AllowedIPs"},
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": {"Ref": "AllowedIPs"},
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "CidrIp": {"Ref": "AllowedIPs"},
            "FromPort": "4443",
            "IpProtocol": "tcp",
            "ToPort": "4443"
          },
          {
            "CidrIp": {"Ref": "AllowedIPs"},
            "FromPort": "6868",
            "IpProtocol": "tcp",
            "ToPort": "6868"
          },
          {
            "CidrIp": {"Ref": "AllowedIPs"},
            "FromPort": "25555",
            "IpProtocol": "tcp",
            "ToPort": "25555"
          },
          {
            "CidrIp": {"Ref": "AllowedIPs"},
            "FromPort": "4443",
            "IpProtocol": "tcp",
            "ToPort": "4443"
          }
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EC2SecurityGroupEgress": {
      "Properties": {
        "DestinationSecurityGroupId": {"Ref": "EC2SecurityGroup"},
        "FromPort": "-1",
        "GroupId": {"Ref": "EC2SecurityGroup"},
        "IpProtocol": "-1",
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupEgress"
    },
    "EC2SecurityGroupEgressToAnywhere": {
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "-1",
        "GroupId": {"Ref": "EC2SecurityGroup"},
        "IpProtocol": "-1",
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupEgress"
    },
    "EC2SecurityGroupIngress": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {"Ref": "EC2SecurityGroup"},
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {"Ref": "EC2SecurityGroup"},
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "EIP": {
      "DependsOn": "GatewayToInternet",
      "Properties": {"Domain": "vpc"},
      "Type": "AWS::EC2::EIP"
    },
    "ElasticLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "3",
          "Interval": "10",
          "Target": "TCP:80",
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        },
        "Listeners": [
          {"InstancePort": "80", "LoadBalancerPort": "80", "Protocol": "HTTP"},
          {
            "InstancePort": "80",
            "LoadBalancerPort": "443",
            "Protocol": "HTTPS",
            "SSLCertificateId": {"Ref": "SSLCertARN"}
          },
          {
            "InstancePort": "80",
            "LoadBalancerPort": "4443",
            "Protocol": "SSL",
            "SSLCertificateId": {"Ref": "SSLCertARN"}
          }
        ],
        "SecurityGroups": [{"Ref": "EC2SecurityGroup"}],
        "Subnets": [{"Ref": "PublicSubnet"}],
        "Tags": [{"Key": "Name", "Value": {"Ref": "AWS::StackName"}}]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "GatewayToInternet": {
      "Properties": {
        "InternetGatewayId": {"Ref": "InternetGateway"},
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "InboundNotificationsNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {"Ref": "NotificationsNetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundNotificationsUINetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {"Ref": "NotificationsUINetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundPrivateNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {"Ref": "PrivateNetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InboundPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Public"}
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "NatBox": {
      "DependsOn": "InternetGateway",
      "Properties": {
        "ImageId": {"Ref": "NatAMI"},
        "InstanceType": "t2.small",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [{"Ref": "EC2SecurityGroup"}],
            "SubnetId": {"Ref": "PublicSubnet"}
          }
        ],
        "SourceDestCheck": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "nat"]]}
          },
          {"Key": "Description", "Value": "Sends traffic to internet gateway"}
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "NotificationsNetworkAcl": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Notifications"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "NotificationsRoute": {
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NatBox"},
        "RouteTableId": {"Ref": "NotificationsRouteTable"}
      },
      "Type": "AWS::EC2::Route"
    },
    "NotificationsRouteTable": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Notifications"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "NotificationsSubnet": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Notifications", "CIDR"]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "notifications"]]
            }
          },
          {"Key": "Network", "Value": "Notifications"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "NotificationsSubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {"Ref": "NotificationsNetworkAcl"},
        "SubnetId": {"Ref": "NotificationsSubnet"}
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "NotificationsSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {"Ref": "NotificationsRouteTable"},
        "SubnetId": {"Ref": "NotificationsSubnet"}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "NotificationsUINetworkAcl": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "NotificationsUI"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "NotificationsUIRoute": {
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NatBox"},
        "RouteTableId": {"Ref": "NotificationsUIRouteTable"}
      },
      "Type": "AWS::EC2::Route"
    },
    "NotificationsUIRouteTable": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "NotificationsUI"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "NotificationsUISubnet": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "NotificationsUI", "CIDR"]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "notifications-ui"]]
            }
          },
          {"Key": "Network", "Value": "NotificationsUI"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "NotificationsUISubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {"Ref": "NotificationsUINetworkAcl"},
        "SubnetId": {"Ref": "NotificationsUISubnet"}
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "NotificationsUISubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {"Ref": "NotificationsUIRouteTable"},
        "SubnetId": {"Ref": "NotificationsUISubnet"}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "OutputNotificationsNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {"Ref": "NotificationsNetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "101"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutputNotificationsUINetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {"Ref": "NotificationsUINetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "101"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutputPrivateNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {"Ref": "PrivateNetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "101"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "OutputPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "101"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "PrivateNetworkAcl": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Private"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "PrivateRoute": {
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NatBox"},
        "RouteTableId": {"Ref": "PrivateRouteTable"}
      },
      "Type": "AWS::EC2::Route"
    },
    "PrivateRouteTable": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Private"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PrivateSubnet": {
      "Properties": {
        "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "Private", "CIDR"]},
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "private"]]}
          },
          {"Key": "Network", "Value": "Private"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {"Ref": "PrivateNetworkAcl"},
        "SubnetId": {"Ref": "PrivateSubnet"}
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PrivateSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {"Ref": "PrivateRouteTable"},
        "SubnetId": {"Ref": "PrivateSubnet"}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicNetworkAcl": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Public"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "PublicRoute": {
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable": {
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Public"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet": {
      "Properties": {
        "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "Public", "CIDR"]},
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "public"]]}
          },
          {"Key": "Network", "Value": "Public"}
        ],
        "VpcId": {"Ref": "VPC"}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "SubnetId": {"Ref": "PublicSubnet"}
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PublicSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "SubnetId": {"Ref": "PublicSubnet"}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SNSELBDetachedCloudwatchTopic": {
      "Properties": {
        "DisplayName": "ELB Detached From All Routers",
        "TopicName": {
          "Fn::Join": ["-", ["elb-detached", {"Ref": "AWS::StackName"}]]
        }
      },
      "Type": "AWS::SNS::Topic"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]},
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "vpc"]]}
          },
          {"Key": "Network", "Value": "Public"}
        ]
      },
      "Type": "AWS::EC2::VPC"
    }
  }
}
