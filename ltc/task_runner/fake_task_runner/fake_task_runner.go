// This file was generated by counterfeiter
package fake_task_runner

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/task_runner"
)

type FakeTaskRunner struct {
	SubmitTaskStub        func(submitTaskJson []byte) (string, error)
	submitTaskMutex       sync.RWMutex
	submitTaskArgsForCall []struct {
		submitTaskJson []byte
	}
	submitTaskReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeTaskRunner) SubmitTask(submitTaskJson []byte) (string, error) {
	fake.submitTaskMutex.Lock()
	fake.submitTaskArgsForCall = append(fake.submitTaskArgsForCall, struct {
		submitTaskJson []byte
	}{submitTaskJson})
	fake.submitTaskMutex.Unlock()
	if fake.SubmitTaskStub != nil {
		return fake.SubmitTaskStub(submitTaskJson)
	} else {
		return fake.submitTaskReturns.result1, fake.submitTaskReturns.result2
	}
}

func (fake *FakeTaskRunner) SubmitTaskCallCount() int {
	fake.submitTaskMutex.RLock()
	defer fake.submitTaskMutex.RUnlock()
	return len(fake.submitTaskArgsForCall)
}

func (fake *FakeTaskRunner) SubmitTaskArgsForCall(i int) []byte {
	fake.submitTaskMutex.RLock()
	defer fake.submitTaskMutex.RUnlock()
	return fake.submitTaskArgsForCall[i].submitTaskJson
}

func (fake *FakeTaskRunner) SubmitTaskReturns(result1 string, result2 error) {
	fake.SubmitTaskStub = nil
	fake.submitTaskReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ task_runner.TaskRunner = new(FakeTaskRunner)
