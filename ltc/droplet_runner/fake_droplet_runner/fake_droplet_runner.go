// This file was generated by counterfeiter
package fake_droplet_runner

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/droplet_runner"
)

type FakeDropletRunner struct {
	UploadBitsStub        func(dropletName, uploadPath string) error
	uploadBitsMutex       sync.RWMutex
	uploadBitsArgsForCall []struct {
		dropletName string
		uploadPath  string
	}
	uploadBitsReturns struct {
		result1 error
	}
	BuildDropletStub        func(dropletName, buildpackUrl string) error
	buildDropletMutex       sync.RWMutex
	buildDropletArgsForCall []struct {
		dropletName  string
		buildpackUrl string
	}
	buildDropletReturns struct {
		result1 error
	}
}

func (fake *FakeDropletRunner) UploadBits(dropletName string, uploadPath string) error {
	fake.uploadBitsMutex.Lock()
	fake.uploadBitsArgsForCall = append(fake.uploadBitsArgsForCall, struct {
		dropletName string
		uploadPath  string
	}{dropletName, uploadPath})
	fake.uploadBitsMutex.Unlock()
	if fake.UploadBitsStub != nil {
		return fake.UploadBitsStub(dropletName, uploadPath)
	} else {
		return fake.uploadBitsReturns.result1
	}
}

func (fake *FakeDropletRunner) UploadBitsCallCount() int {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return len(fake.uploadBitsArgsForCall)
}

func (fake *FakeDropletRunner) UploadBitsArgsForCall(i int) (string, string) {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return fake.uploadBitsArgsForCall[i].dropletName, fake.uploadBitsArgsForCall[i].uploadPath
}

func (fake *FakeDropletRunner) UploadBitsReturns(result1 error) {
	fake.UploadBitsStub = nil
	fake.uploadBitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletRunner) BuildDroplet(dropletName string, buildpackUrl string) error {
	fake.buildDropletMutex.Lock()
	fake.buildDropletArgsForCall = append(fake.buildDropletArgsForCall, struct {
		dropletName  string
		buildpackUrl string
	}{dropletName, buildpackUrl})
	fake.buildDropletMutex.Unlock()
	if fake.BuildDropletStub != nil {
		return fake.BuildDropletStub(dropletName, buildpackUrl)
	} else {
		return fake.buildDropletReturns.result1
	}
}

func (fake *FakeDropletRunner) BuildDropletCallCount() int {
	fake.buildDropletMutex.RLock()
	defer fake.buildDropletMutex.RUnlock()
	return len(fake.buildDropletArgsForCall)
}

func (fake *FakeDropletRunner) BuildDropletArgsForCall(i int) (string, string) {
	fake.buildDropletMutex.RLock()
	defer fake.buildDropletMutex.RUnlock()
	return fake.buildDropletArgsForCall[i].dropletName, fake.buildDropletArgsForCall[i].buildpackUrl
}

func (fake *FakeDropletRunner) BuildDropletReturns(result1 error) {
	fake.BuildDropletStub = nil
	fake.buildDropletReturns = struct {
		result1 error
	}{result1}
}

var _ droplet_runner.DropletRunner = new(FakeDropletRunner)
