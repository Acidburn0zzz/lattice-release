// This file was generated by counterfeiter
package fake_droplet_runner

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/app_runner"
	"github.com/cloudfoundry-incubator/lattice/ltc/droplet_runner"
)

type FakeDropletRunner struct {
	UploadBitsStub        func(dropletName, uploadPath string) error
	uploadBitsMutex       sync.RWMutex
	uploadBitsArgsForCall []struct {
		dropletName string
		uploadPath  string
	}
	uploadBitsReturns struct {
		result1 error
	}
	BuildDropletStub        func(dropletName, buildpackUrl string) error
	buildDropletMutex       sync.RWMutex
	buildDropletArgsForCall []struct {
		dropletName  string
		buildpackUrl string
	}
	buildDropletReturns struct {
		result1 error
	}
	LaunchDropletStub        func(dropletName string, appEnvironmentParams app_runner.AppEnvironmentParams) error
	launchDropletMutex       sync.RWMutex
	launchDropletArgsForCall []struct {
		dropletName          string
		appEnvironmentParams app_runner.AppEnvironmentParams
	}
	launchDropletReturns struct {
		result1 error
	}
	ListDropletsStub        func() ([]droplet_runner.Droplet, error)
	listDropletsMutex       sync.RWMutex
	listDropletsArgsForCall []struct{}
	listDropletsReturns     struct {
		result1 []droplet_runner.Droplet
		result2 error
	}
}

func (fake *FakeDropletRunner) UploadBits(dropletName string, uploadPath string) error {
	fake.uploadBitsMutex.Lock()
	fake.uploadBitsArgsForCall = append(fake.uploadBitsArgsForCall, struct {
		dropletName string
		uploadPath  string
	}{dropletName, uploadPath})
	fake.uploadBitsMutex.Unlock()
	if fake.UploadBitsStub != nil {
		return fake.UploadBitsStub(dropletName, uploadPath)
	} else {
		return fake.uploadBitsReturns.result1
	}
}

func (fake *FakeDropletRunner) UploadBitsCallCount() int {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return len(fake.uploadBitsArgsForCall)
}

func (fake *FakeDropletRunner) UploadBitsArgsForCall(i int) (string, string) {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return fake.uploadBitsArgsForCall[i].dropletName, fake.uploadBitsArgsForCall[i].uploadPath
}

func (fake *FakeDropletRunner) UploadBitsReturns(result1 error) {
	fake.UploadBitsStub = nil
	fake.uploadBitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletRunner) BuildDroplet(dropletName string, buildpackUrl string) error {
	fake.buildDropletMutex.Lock()
	fake.buildDropletArgsForCall = append(fake.buildDropletArgsForCall, struct {
		dropletName  string
		buildpackUrl string
	}{dropletName, buildpackUrl})
	fake.buildDropletMutex.Unlock()
	if fake.BuildDropletStub != nil {
		return fake.BuildDropletStub(dropletName, buildpackUrl)
	} else {
		return fake.buildDropletReturns.result1
	}
}

func (fake *FakeDropletRunner) BuildDropletCallCount() int {
	fake.buildDropletMutex.RLock()
	defer fake.buildDropletMutex.RUnlock()
	return len(fake.buildDropletArgsForCall)
}

func (fake *FakeDropletRunner) BuildDropletArgsForCall(i int) (string, string) {
	fake.buildDropletMutex.RLock()
	defer fake.buildDropletMutex.RUnlock()
	return fake.buildDropletArgsForCall[i].dropletName, fake.buildDropletArgsForCall[i].buildpackUrl
}

func (fake *FakeDropletRunner) BuildDropletReturns(result1 error) {
	fake.BuildDropletStub = nil
	fake.buildDropletReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletRunner) LaunchDroplet(dropletName string, appEnvironmentParams app_runner.AppEnvironmentParams) error {
	fake.launchDropletMutex.Lock()
	fake.launchDropletArgsForCall = append(fake.launchDropletArgsForCall, struct {
		dropletName          string
		appEnvironmentParams app_runner.AppEnvironmentParams
	}{dropletName, appEnvironmentParams})
	fake.launchDropletMutex.Unlock()
	if fake.LaunchDropletStub != nil {
		return fake.LaunchDropletStub(dropletName, appEnvironmentParams)
	} else {
		return fake.launchDropletReturns.result1
	}
}

func (fake *FakeDropletRunner) LaunchDropletCallCount() int {
	fake.launchDropletMutex.RLock()
	defer fake.launchDropletMutex.RUnlock()
	return len(fake.launchDropletArgsForCall)
}

func (fake *FakeDropletRunner) LaunchDropletArgsForCall(i int) (string, app_runner.AppEnvironmentParams) {
	fake.launchDropletMutex.RLock()
	defer fake.launchDropletMutex.RUnlock()
	return fake.launchDropletArgsForCall[i].dropletName, fake.launchDropletArgsForCall[i].appEnvironmentParams
}

func (fake *FakeDropletRunner) LaunchDropletReturns(result1 error) {
	fake.LaunchDropletStub = nil
	fake.launchDropletReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletRunner) ListDroplets() ([]droplet_runner.Droplet, error) {
	fake.listDropletsMutex.Lock()
	fake.listDropletsArgsForCall = append(fake.listDropletsArgsForCall, struct{}{})
	fake.listDropletsMutex.Unlock()
	if fake.ListDropletsStub != nil {
		return fake.ListDropletsStub()
	} else {
		return fake.listDropletsReturns.result1, fake.listDropletsReturns.result2
	}
}

func (fake *FakeDropletRunner) ListDropletsCallCount() int {
	fake.listDropletsMutex.RLock()
	defer fake.listDropletsMutex.RUnlock()
	return len(fake.listDropletsArgsForCall)
}

func (fake *FakeDropletRunner) ListDropletsReturns(result1 []droplet_runner.Droplet, result2 error) {
	fake.ListDropletsStub = nil
	fake.listDropletsReturns = struct {
		result1 []droplet_runner.Droplet
		result2 error
	}{result1, result2}
}

var _ droplet_runner.DropletRunner = new(FakeDropletRunner)
