// This file was generated by counterfeiter
package fake_droplet_runner

import (
	"os"
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/droplet_runner"
)

type FakeDropletRunner struct {
	UploadBitsStub        func(dropletName string, uploadFile *os.File) error
	uploadBitsMutex       sync.RWMutex
	uploadBitsArgsForCall []struct {
		dropletName string
		uploadFile  *os.File
	}
	uploadBitsReturns struct {
		result1 error
	}
}

func (fake *FakeDropletRunner) UploadBits(dropletName string, uploadFile *os.File) error {
	fake.uploadBitsMutex.Lock()
	fake.uploadBitsArgsForCall = append(fake.uploadBitsArgsForCall, struct {
		dropletName string
		uploadFile  *os.File
	}{dropletName, uploadFile})
	fake.uploadBitsMutex.Unlock()
	if fake.UploadBitsStub != nil {
		return fake.UploadBitsStub(dropletName, uploadFile)
	} else {
		return fake.uploadBitsReturns.result1
	}
}

func (fake *FakeDropletRunner) UploadBitsCallCount() int {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return len(fake.uploadBitsArgsForCall)
}

func (fake *FakeDropletRunner) UploadBitsArgsForCall(i int) (string, *os.File) {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return fake.uploadBitsArgsForCall[i].dropletName, fake.uploadBitsArgsForCall[i].uploadFile
}

func (fake *FakeDropletRunner) UploadBitsReturns(result1 error) {
	fake.UploadBitsStub = nil
	fake.uploadBitsReturns = struct {
		result1 error
	}{result1}
}

var _ droplet_runner.DropletRunner = new(FakeDropletRunner)
