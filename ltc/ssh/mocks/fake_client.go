// This file was generated by counterfeiter
package mocks

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/ssh"
	"github.com/cloudfoundry-incubator/lattice/ltc/ssh/sshapi"
)

type FakeClient struct {
	OpenStub        func(width, height int) (*sshapi.Session, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		width  int
		height int
	}
	openReturns struct {
		result1 *sshapi.Session
		result2 error
	}
	ForwardStub        func(localConn io.ReadWriteCloser, remoteAddress string) error
	forwardMutex       sync.RWMutex
	forwardArgsForCall []struct {
		localConn     io.ReadWriteCloser
		remoteAddress string
	}
	forwardReturns struct {
		result1 error
	}
}

func (fake *FakeClient) Open(width int, height int) (*sshapi.Session, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		width  int
		height int
	}{width, height})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(width, height)
	} else {
		return fake.openReturns.result1, fake.openReturns.result2
	}
}

func (fake *FakeClient) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeClient) OpenArgsForCall(i int) (int, int) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].width, fake.openArgsForCall[i].height
}

func (fake *FakeClient) OpenReturns(result1 *sshapi.Session, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 *sshapi.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Forward(localConn io.ReadWriteCloser, remoteAddress string) error {
	fake.forwardMutex.Lock()
	fake.forwardArgsForCall = append(fake.forwardArgsForCall, struct {
		localConn     io.ReadWriteCloser
		remoteAddress string
	}{localConn, remoteAddress})
	fake.forwardMutex.Unlock()
	if fake.ForwardStub != nil {
		return fake.ForwardStub(localConn, remoteAddress)
	} else {
		return fake.forwardReturns.result1
	}
}

func (fake *FakeClient) ForwardCallCount() int {
	fake.forwardMutex.RLock()
	defer fake.forwardMutex.RUnlock()
	return len(fake.forwardArgsForCall)
}

func (fake *FakeClient) ForwardArgsForCall(i int) (io.ReadWriteCloser, string) {
	fake.forwardMutex.RLock()
	defer fake.forwardMutex.RUnlock()
	return fake.forwardArgsForCall[i].localConn, fake.forwardArgsForCall[i].remoteAddress
}

func (fake *FakeClient) ForwardReturns(result1 error) {
	fake.ForwardStub = nil
	fake.forwardReturns = struct {
		result1 error
	}{result1}
}

var _ ssh.Client = new(FakeClient)
