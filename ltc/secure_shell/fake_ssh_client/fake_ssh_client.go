// This file was generated by counterfeiter
package fake_ssh_client

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/secure_shell"
	"golang.org/x/crypto/ssh"
)

type FakeSSHClient struct {
	NewSessionStub        func() (*ssh.Session, error)
	newSessionMutex       sync.RWMutex
	newSessionArgsForCall []struct{}
	newSessionReturns struct {
		result1 *ssh.Session
		result2 error
	}
	DialStub        func(n, addr string) (net.Conn, error)
	dialMutex       sync.RWMutex
	dialArgsForCall []struct {
		n    string
		addr string
	}
	dialReturns struct {
		result1 net.Conn
		result2 error
	}
}

func (fake *FakeSSHClient) NewSession() (*ssh.Session, error) {
	fake.newSessionMutex.Lock()
	fake.newSessionArgsForCall = append(fake.newSessionArgsForCall, struct{}{})
	fake.newSessionMutex.Unlock()
	if fake.NewSessionStub != nil {
		return fake.NewSessionStub()
	} else {
		return fake.newSessionReturns.result1, fake.newSessionReturns.result2
	}
}

func (fake *FakeSSHClient) NewSessionCallCount() int {
	fake.newSessionMutex.RLock()
	defer fake.newSessionMutex.RUnlock()
	return len(fake.newSessionArgsForCall)
}

func (fake *FakeSSHClient) NewSessionReturns(result1 *ssh.Session, result2 error) {
	fake.NewSessionStub = nil
	fake.newSessionReturns = struct {
		result1 *ssh.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeSSHClient) Dial(n string, addr string) (net.Conn, error) {
	fake.dialMutex.Lock()
	fake.dialArgsForCall = append(fake.dialArgsForCall, struct {
		n    string
		addr string
	}{n, addr})
	fake.dialMutex.Unlock()
	if fake.DialStub != nil {
		return fake.DialStub(n, addr)
	} else {
		return fake.dialReturns.result1, fake.dialReturns.result2
	}
}

func (fake *FakeSSHClient) DialCallCount() int {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return len(fake.dialArgsForCall)
}

func (fake *FakeSSHClient) DialArgsForCall(i int) (string, string) {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return fake.dialArgsForCall[i].n, fake.dialArgsForCall[i].addr
}

func (fake *FakeSSHClient) DialReturns(result1 net.Conn, result2 error) {
	fake.DialStub = nil
	fake.dialReturns = struct {
		result1 net.Conn
		result2 error
	}{result1, result2}
}

var _ secure_shell.SSHClient = new(FakeSSHClient)
