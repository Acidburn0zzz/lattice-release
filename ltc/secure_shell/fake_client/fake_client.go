// This file was generated by counterfeiter
package fake_client

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/secure_shell"
)

type FakeClient struct {
	DialStub        func(n, addr string) (io.ReadWriteCloser, error)
	dialMutex       sync.RWMutex
	dialArgsForCall []struct {
		n    string
		addr string
	}
	dialReturns struct {
		result1 io.ReadWriteCloser
		result2 error
	}
	NewSessionStub        func() (secure_shell.SecureSession, error)
	newSessionMutex       sync.RWMutex
	newSessionArgsForCall []struct{}
	newSessionReturns struct {
		result1 secure_shell.SecureSession
		result2 error
	}
	AcceptStub        func(localConn io.ReadWriteCloser, remoteAddress string) error
	acceptMutex       sync.RWMutex
	acceptArgsForCall []struct {
		localConn     io.ReadWriteCloser
		remoteAddress string
	}
	acceptReturns struct {
		result1 error
	}
}

func (fake *FakeClient) Dial(n string, addr string) (io.ReadWriteCloser, error) {
	fake.dialMutex.Lock()
	fake.dialArgsForCall = append(fake.dialArgsForCall, struct {
		n    string
		addr string
	}{n, addr})
	fake.dialMutex.Unlock()
	if fake.DialStub != nil {
		return fake.DialStub(n, addr)
	} else {
		return fake.dialReturns.result1, fake.dialReturns.result2
	}
}

func (fake *FakeClient) DialCallCount() int {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return len(fake.dialArgsForCall)
}

func (fake *FakeClient) DialArgsForCall(i int) (string, string) {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return fake.dialArgsForCall[i].n, fake.dialArgsForCall[i].addr
}

func (fake *FakeClient) DialReturns(result1 io.ReadWriteCloser, result2 error) {
	fake.DialStub = nil
	fake.dialReturns = struct {
		result1 io.ReadWriteCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) NewSession() (secure_shell.SecureSession, error) {
	fake.newSessionMutex.Lock()
	fake.newSessionArgsForCall = append(fake.newSessionArgsForCall, struct{}{})
	fake.newSessionMutex.Unlock()
	if fake.NewSessionStub != nil {
		return fake.NewSessionStub()
	} else {
		return fake.newSessionReturns.result1, fake.newSessionReturns.result2
	}
}

func (fake *FakeClient) NewSessionCallCount() int {
	fake.newSessionMutex.RLock()
	defer fake.newSessionMutex.RUnlock()
	return len(fake.newSessionArgsForCall)
}

func (fake *FakeClient) NewSessionReturns(result1 secure_shell.SecureSession, result2 error) {
	fake.NewSessionStub = nil
	fake.newSessionReturns = struct {
		result1 secure_shell.SecureSession
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Accept(localConn io.ReadWriteCloser, remoteAddress string) error {
	fake.acceptMutex.Lock()
	fake.acceptArgsForCall = append(fake.acceptArgsForCall, struct {
		localConn     io.ReadWriteCloser
		remoteAddress string
	}{localConn, remoteAddress})
	fake.acceptMutex.Unlock()
	if fake.AcceptStub != nil {
		return fake.AcceptStub(localConn, remoteAddress)
	} else {
		return fake.acceptReturns.result1
	}
}

func (fake *FakeClient) AcceptCallCount() int {
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	return len(fake.acceptArgsForCall)
}

func (fake *FakeClient) AcceptArgsForCall(i int) (io.ReadWriteCloser, string) {
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	return fake.acceptArgsForCall[i].localConn, fake.acceptArgsForCall[i].remoteAddress
}

func (fake *FakeClient) AcceptReturns(result1 error) {
	fake.AcceptStub = nil
	fake.acceptReturns = struct {
		result1 error
	}{result1}
}

var _ secure_shell.Client = new(FakeClient)
