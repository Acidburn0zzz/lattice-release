// This file was generated by counterfeiter
package fake_tailed_logs_outputter

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/logs/console_tailed_logs_outputter"
)

type FakeTailedLogsOutputter struct {
	OutputDebugLogsStub         func()
	outputDebugLogsMutex        sync.RWMutex
	outputDebugLogsArgsForCall  []struct{}
	OutputTailedLogsStub        func(appGuid string)
	outputTailedLogsMutex       sync.RWMutex
	outputTailedLogsArgsForCall []struct {
		appGuid string
	}
	StopOutputtingStub        func()
	stopOutputtingMutex       sync.RWMutex
	stopOutputtingArgsForCall []struct{}
	stopChan                  chan struct{}
}

func NewFakeTailedLogsOutputter() *FakeTailedLogsOutputter {
	return &FakeTailedLogsOutputter{
		stopChan: make(chan struct{}),
	}
}

func (fake *FakeTailedLogsOutputter) OutputDebugLogs() {
	fake.outputDebugLogsMutex.Lock()
	fake.outputDebugLogsArgsForCall = append(fake.outputDebugLogsArgsForCall, struct{}{})
	fake.outputDebugLogsMutex.Unlock()
	if fake.OutputDebugLogsStub != nil {
		fake.OutputDebugLogsStub()
	}
	<-fake.stopChan
}

func (fake *FakeTailedLogsOutputter) OutputDebugLogsCallCount() int {
	fake.outputDebugLogsMutex.RLock()
	defer fake.outputDebugLogsMutex.RUnlock()
	return len(fake.outputDebugLogsArgsForCall)
}

func (fake *FakeTailedLogsOutputter) OutputTailedLogs(appGuid string) {
	fake.outputTailedLogsMutex.Lock()
	fake.outputTailedLogsArgsForCall = append(fake.outputTailedLogsArgsForCall, struct {
		appGuid string
	}{appGuid})
	fake.outputTailedLogsMutex.Unlock()
	if fake.OutputTailedLogsStub != nil {
		fake.OutputTailedLogsStub(appGuid)
	}
	<-fake.stopChan
}

func (fake *FakeTailedLogsOutputter) OutputTailedLogsCallCount() int {
	fake.outputTailedLogsMutex.RLock()
	defer fake.outputTailedLogsMutex.RUnlock()
	return len(fake.outputTailedLogsArgsForCall)
}

func (fake *FakeTailedLogsOutputter) OutputTailedLogsArgsForCall(i int) string {
	fake.outputTailedLogsMutex.RLock()
	defer fake.outputTailedLogsMutex.RUnlock()
	return fake.outputTailedLogsArgsForCall[i].appGuid
}

func (fake *FakeTailedLogsOutputter) StopOutputting() {
	fake.stopOutputtingMutex.Lock()
	fake.stopOutputtingArgsForCall = append(fake.stopOutputtingArgsForCall, struct{}{})
	fake.stopOutputtingMutex.Unlock()
	if fake.StopOutputtingStub != nil {
		fake.StopOutputtingStub()
	}
	close(fake.stopChan)
}

func (fake *FakeTailedLogsOutputter) StopOutputtingCallCount() int {
	fake.stopOutputtingMutex.RLock()
	defer fake.stopOutputtingMutex.RUnlock()
	return len(fake.stopOutputtingArgsForCall)
}

var _ console_tailed_logs_outputter.TailedLogsOutputter = new(FakeTailedLogsOutputter)
