// This file was generated by counterfeiter
package fake_blob_bucket

import (
	"io"
	"net/http"
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/config/blob_store"
	"github.com/goamz/goamz/s3"
)

type FakeBlobBucket struct {
	HeadStub        func(path string, headers map[string][]string) (*http.Response, error)
	headMutex       sync.RWMutex
	headArgsForCall []struct {
		path    string
		headers map[string][]string
	}
	headReturns struct {
		result1 *http.Response
		result2 error
	}
	PutStub        func(path string, data []byte, contType string, perm s3.ACL, options s3.Options) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		path     string
		data     []byte
		contType string
		perm     s3.ACL
		options  s3.Options
	}
	putReturns struct {
		result1 error
	}
	PutReaderStub        func(path string, r io.Reader, length int64, contType string, perm s3.ACL, options s3.Options) error
	putReaderMutex       sync.RWMutex
	putReaderArgsForCall []struct {
		path     string
		r        io.Reader
		length   int64
		contType string
		perm     s3.ACL
		options  s3.Options
	}
	putReaderReturns struct {
		result1 error
	}
}

func (fake *FakeBlobBucket) Head(path string, headers map[string][]string) (*http.Response, error) {
	fake.headMutex.Lock()
	fake.headArgsForCall = append(fake.headArgsForCall, struct {
		path    string
		headers map[string][]string
	}{path, headers})
	fake.headMutex.Unlock()
	if fake.HeadStub != nil {
		return fake.HeadStub(path, headers)
	} else {
		return fake.headReturns.result1, fake.headReturns.result2
	}
}

func (fake *FakeBlobBucket) HeadCallCount() int {
	fake.headMutex.RLock()
	defer fake.headMutex.RUnlock()
	return len(fake.headArgsForCall)
}

func (fake *FakeBlobBucket) HeadArgsForCall(i int) (string, map[string][]string) {
	fake.headMutex.RLock()
	defer fake.headMutex.RUnlock()
	return fake.headArgsForCall[i].path, fake.headArgsForCall[i].headers
}

func (fake *FakeBlobBucket) HeadReturns(result1 *http.Response, result2 error) {
	fake.HeadStub = nil
	fake.headReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobBucket) Put(path string, data []byte, contType string, perm s3.ACL, options s3.Options) error {
	fake.putMutex.Lock()
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		path     string
		data     []byte
		contType string
		perm     s3.ACL
		options  s3.Options
	}{path, data, contType, perm, options})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(path, data, contType, perm, options)
	} else {
		return fake.putReturns.result1
	}
}

func (fake *FakeBlobBucket) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakeBlobBucket) PutArgsForCall(i int) (string, []byte, string, s3.ACL, s3.Options) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].path, fake.putArgsForCall[i].data, fake.putArgsForCall[i].contType, fake.putArgsForCall[i].perm, fake.putArgsForCall[i].options
}

func (fake *FakeBlobBucket) PutReturns(result1 error) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobBucket) PutReader(path string, r io.Reader, length int64, contType string, perm s3.ACL, options s3.Options) error {
	fake.putReaderMutex.Lock()
	fake.putReaderArgsForCall = append(fake.putReaderArgsForCall, struct {
		path     string
		r        io.Reader
		length   int64
		contType string
		perm     s3.ACL
		options  s3.Options
	}{path, r, length, contType, perm, options})
	fake.putReaderMutex.Unlock()
	if fake.PutReaderStub != nil {
		return fake.PutReaderStub(path, r, length, contType, perm, options)
	} else {
		return fake.putReaderReturns.result1
	}
}

func (fake *FakeBlobBucket) PutReaderCallCount() int {
	fake.putReaderMutex.RLock()
	defer fake.putReaderMutex.RUnlock()
	return len(fake.putReaderArgsForCall)
}

func (fake *FakeBlobBucket) PutReaderArgsForCall(i int) (string, io.Reader, int64, string, s3.ACL, s3.Options) {
	fake.putReaderMutex.RLock()
	defer fake.putReaderMutex.RUnlock()
	return fake.putReaderArgsForCall[i].path, fake.putReaderArgsForCall[i].r, fake.putReaderArgsForCall[i].length, fake.putReaderArgsForCall[i].contType, fake.putReaderArgsForCall[i].perm, fake.putReaderArgsForCall[i].options
}

func (fake *FakeBlobBucket) PutReaderReturns(result1 error) {
	fake.PutReaderStub = nil
	fake.putReaderReturns = struct {
		result1 error
	}{result1}
}

var _ blob_store.BlobBucket = new(FakeBlobBucket)
