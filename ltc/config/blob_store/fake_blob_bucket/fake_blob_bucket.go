// This file was generated by counterfeiter
package fake_blob_bucket

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/config/blob_store"
	"github.com/goamz/goamz/s3"
)

type FakeBlobBucket struct {
	ListStub        func(prefix, delim, marker string, max int) (result *s3.ListResp, err error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		prefix string
		delim  string
		marker string
		max    int
	}
	listReturns struct {
		result1 *s3.ListResp
		result2 error
	}
	PutReaderStub        func(path string, r io.Reader, length int64, contType string, perm s3.ACL, options s3.Options) error
	putReaderMutex       sync.RWMutex
	putReaderArgsForCall []struct {
		path     string
		r        io.Reader
		length   int64
		contType string
		perm     s3.ACL
		options  s3.Options
	}
	putReaderReturns struct {
		result1 error
	}
	GetReaderStub        func(path string) (rc io.ReadCloser, err error)
	getReaderMutex       sync.RWMutex
	getReaderArgsForCall []struct {
		path string
	}
	getReaderReturns struct {
		result1 io.ReadCloser
		result2 error
	}
}

func (fake *FakeBlobBucket) List(prefix string, delim string, marker string, max int) (result *s3.ListResp, err error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		prefix string
		delim  string
		marker string
		max    int
	}{prefix, delim, marker, max})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(prefix, delim, marker, max)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeBlobBucket) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeBlobBucket) ListArgsForCall(i int) (string, string, string, int) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].prefix, fake.listArgsForCall[i].delim, fake.listArgsForCall[i].marker, fake.listArgsForCall[i].max
}

func (fake *FakeBlobBucket) ListReturns(result1 *s3.ListResp, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *s3.ListResp
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobBucket) PutReader(path string, r io.Reader, length int64, contType string, perm s3.ACL, options s3.Options) error {
	fake.putReaderMutex.Lock()
	fake.putReaderArgsForCall = append(fake.putReaderArgsForCall, struct {
		path     string
		r        io.Reader
		length   int64
		contType string
		perm     s3.ACL
		options  s3.Options
	}{path, r, length, contType, perm, options})
	fake.putReaderMutex.Unlock()
	if fake.PutReaderStub != nil {
		return fake.PutReaderStub(path, r, length, contType, perm, options)
	} else {
		return fake.putReaderReturns.result1
	}
}

func (fake *FakeBlobBucket) PutReaderCallCount() int {
	fake.putReaderMutex.RLock()
	defer fake.putReaderMutex.RUnlock()
	return len(fake.putReaderArgsForCall)
}

func (fake *FakeBlobBucket) PutReaderArgsForCall(i int) (string, io.Reader, int64, string, s3.ACL, s3.Options) {
	fake.putReaderMutex.RLock()
	defer fake.putReaderMutex.RUnlock()
	return fake.putReaderArgsForCall[i].path, fake.putReaderArgsForCall[i].r, fake.putReaderArgsForCall[i].length, fake.putReaderArgsForCall[i].contType, fake.putReaderArgsForCall[i].perm, fake.putReaderArgsForCall[i].options
}

func (fake *FakeBlobBucket) PutReaderReturns(result1 error) {
	fake.PutReaderStub = nil
	fake.putReaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobBucket) GetReader(path string) (rc io.ReadCloser, err error) {
	fake.getReaderMutex.Lock()
	fake.getReaderArgsForCall = append(fake.getReaderArgsForCall, struct {
		path string
	}{path})
	fake.getReaderMutex.Unlock()
	if fake.GetReaderStub != nil {
		return fake.GetReaderStub(path)
	} else {
		return fake.getReaderReturns.result1, fake.getReaderReturns.result2
	}
}

func (fake *FakeBlobBucket) GetReaderCallCount() int {
	fake.getReaderMutex.RLock()
	defer fake.getReaderMutex.RUnlock()
	return len(fake.getReaderArgsForCall)
}

func (fake *FakeBlobBucket) GetReaderArgsForCall(i int) string {
	fake.getReaderMutex.RLock()
	defer fake.getReaderMutex.RUnlock()
	return fake.getReaderArgsForCall[i].path
}

func (fake *FakeBlobBucket) GetReaderReturns(result1 io.ReadCloser, result2 error) {
	fake.GetReaderStub = nil
	fake.getReaderReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

var _ blob_store.BlobBucket = new(FakeBlobBucket)
