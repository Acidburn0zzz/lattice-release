// This file was generated by counterfeiter
package fake_blob_store

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/config/blob_store"
	"github.com/goamz/goamz/s3"
)

type FakeBlobStore struct {
	BucketStub        func(name string) blob_store.BlobBucket
	bucketMutex       sync.RWMutex
	bucketArgsForCall []struct {
		name string
	}
	bucketReturns struct {
		result1 blob_store.BlobBucket
	}
	S3EndpointStub        func() *s3.S3
	s3EndpointMutex       sync.RWMutex
	s3EndpointArgsForCall []struct{}
	s3EndpointReturns struct {
		result1 *s3.S3
	}
}

func (fake *FakeBlobStore) Bucket(name string) blob_store.BlobBucket {
	fake.bucketMutex.Lock()
	fake.bucketArgsForCall = append(fake.bucketArgsForCall, struct {
		name string
	}{name})
	fake.bucketMutex.Unlock()
	if fake.BucketStub != nil {
		return fake.BucketStub(name)
	} else {
		return fake.bucketReturns.result1
	}
}

func (fake *FakeBlobStore) BucketCallCount() int {
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	return len(fake.bucketArgsForCall)
}

func (fake *FakeBlobStore) BucketArgsForCall(i int) string {
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	return fake.bucketArgsForCall[i].name
}

func (fake *FakeBlobStore) BucketReturns(result1 blob_store.BlobBucket) {
	fake.BucketStub = nil
	fake.bucketReturns = struct {
		result1 blob_store.BlobBucket
	}{result1}
}

func (fake *FakeBlobStore) S3Endpoint() *s3.S3 {
	fake.s3EndpointMutex.Lock()
	fake.s3EndpointArgsForCall = append(fake.s3EndpointArgsForCall, struct{}{})
	fake.s3EndpointMutex.Unlock()
	if fake.S3EndpointStub != nil {
		return fake.S3EndpointStub()
	} else {
		return fake.s3EndpointReturns.result1
	}
}

func (fake *FakeBlobStore) S3EndpointCallCount() int {
	fake.s3EndpointMutex.RLock()
	defer fake.s3EndpointMutex.RUnlock()
	return len(fake.s3EndpointArgsForCall)
}

func (fake *FakeBlobStore) S3EndpointReturns(result1 *s3.S3) {
	fake.S3EndpointStub = nil
	fake.s3EndpointReturns = struct {
		result1 *s3.S3
	}{result1}
}

var _ blob_store.BlobStore = new(FakeBlobStore)
