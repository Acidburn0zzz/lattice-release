#!/bin/bash

set -e

if [ -z "$1" ]; then
    echo "Incorrect Usage. Usage: $0 output-tgz"
    exit 1
fi

LATTICE_DIR=$(cd `dirname $0` && cd ../.. && pwd)
LATTICE_TGZ=$1
LATTICE_VERSION=${2:-`git -C $LATTICE_DIR describe --tags --always`} 

BUILD_DIR=$LATTICE_DIR/build
TMP_DIR=$(mktemp -d /tmp/lattice.XXXXXX)
OUTPUT_DIR=$TMP_DIR/lattice-build

DIEGO_RELEASE_DIR=$BUILD_DIR/diego-release
GARDEN_LINUX_RELEASE_DIR=$BUILD_DIR/garden-linux-release
CF_RELEASE_DIR=$BUILD_DIR/cf-release
ROUTING_RELEASE_DIR=$BUILD_DIR/cf-routing-release

echo "Downloading consul and haproxy..."
wget --quiet "http://blob.cfblob.com/3e6c1e47-95a5-45ef-aeec-2cb4cc4c529a" -O $TMP_DIR/consul.zip
wget --quiet "http://blob.cfblob.com/02657a44-3292-4e0b-8b18-bcad061a2381" -O $TMP_DIR/haproxy.tgz
wget --quiet "http://blob.cfblob.com/22601a5f-4ef4-4621-80aa-0fa1f8067db6" -O $TMP_DIR/haproxy_pcre.tgz

cp -a $LATTICE_DIR/cluster/common $OUTPUT_DIR/
cp -a $LATTICE_DIR/cluster/scripts $OUTPUT_DIR/

export GOOS=linux
export GOARCH=amd64
export GOPATH=$DIEGO_RELEASE_DIR

echo "Compiling cell..."

cp -a ${LATTICE_DIR}/cluster/cell ${OUTPUT_DIR}/

mkdir -p $TMP_DIR/btrfs-progs
pushd $TMP_DIR/btrfs-progs
    git clone git://git.kernel.org/pub/scm/linux/kernel/git/kdave/btrfs-progs.git .
    ./autogen.sh
    ./configure
    make install
popd

mkdir -p $OUTPUT_DIR/cell/{bin,garden}

pushd $GARDEN_LINUX_RELEASE_DIR/src/github.com/cloudfoundry-incubator/garden-linux
    GOPATH=$GARDEN_LINUX_RELEASE_DIR:$GOPATH make
    cp -a out/garden-linux $OUTPUT_DIR/cell/bin/
    cp -a linux_backend/bin $OUTPUT_DIR/cell/garden/garden-bin
    cp -a linux_backend/skeleton $OUTPUT_DIR/cell/garden/skeleton
popd

pushd $OUTPUT_DIR/cell/bin
  go build -a github.com/cloudfoundry-incubator/rep/cmd/rep
  go build -a github.com/cloudfoundry-incubator/converger/cmd/converger
  GOPATH=$LATTICE_DIR/cell-helpers/Godeps/_workspace:$GOPATH go build -a github.com/cloudfoundry-incubator/lattice/cell-helpers/tee2metron
  GOPATH=$CF_RELEASE_DIR/src/loggregator go build -a metron
popd

unzip $TMP_DIR/consul.zip -d $OUTPUT_DIR/cell/bin/
chmod +x $OUTPUT_DIR/cell/bin/consul

echo "Compiling brain..."

cp -a ${LATTICE_DIR}/cluster/brain ${OUTPUT_DIR}/

mkdir -p $OUTPUT_DIR/brain/bin

pushd $OUTPUT_DIR/brain/bin
    go build -a github.com/cloudfoundry-incubator/route-emitter/cmd/route-emitter
    go build -a github.com/apcera/gnatsd
    go build -a github.com/cloudfoundry-incubator/auctioneer/cmd/auctioneer
    go build -a github.com/cloudfoundry-incubator/receptor/cmd/receptor
    go build -a github.com/cloudfoundry-incubator/file-server/cmd/file-server
    go build -a github.com/cloudfoundry-incubator/diego-ssh/cmd/ssh-proxy
    go build -a github.com/cloudfoundry-incubator/bbs/cmd/bbs

    CGO_ENABLED=0 go build -a -installsuffix static github.com/cloudfoundry-incubator/healthcheck/cmd/healthcheck
    CGO_ENABLED=0 go build -a -installsuffix static github.com/cloudfoundry-incubator/buildpack_app_lifecycle/launcher
    CGO_ENABLED=0 go build -a -installsuffix static github.com/cloudfoundry-incubator/buildpack_app_lifecycle/builder
    CGO_ENABLED=0 go build -a -installsuffix static github.com/cloudfoundry-incubator/diego-ssh/cmd/sshd

    mv sshd diego-sshd
    for binary in launcher builder diego-sshd healthcheck; do
        ldd $binary && echo "$binary must be statically linked" && false
    done

    GOPATH=$LATTICE_DIR/cell-helpers/Godeps/_workspace:$GOPATH go build -a github.com/cloudfoundry-incubator/lattice/cell-helpers/s3tool
    GOPATH=$LATTICE_DIR/cell-helpers/Godeps/_workspace:$GOPATH go build -a github.com/cloudfoundry-incubator/lattice/cell-helpers/davtool

    GOPATH=$CF_RELEASE_DIR/src/github.com/cloudfoundry/gorouter/Godeps/_workspace:${CF_RELEASE_DIR} go build -a github.com/cloudfoundry/gorouter

    GOPATH=$ROUTING_RELEASE_DIR go build -a github.com/cloudfoundry-incubator/tcp-emitter/cmd/tcp-emitter
    GOPATH=$ROUTING_RELEASE_DIR go build -a github.com/cloudfoundry-incubator/cf-tcp-router/cmd/router-configurer

    GOPATH=$CF_RELEASE_DIR/src/loggregator go build -a trafficcontroller 
    GOPATH=$CF_RELEASE_DIR/src/loggregator go build -a doppler 
    GOPATH=$CF_RELEASE_DIR/src/loggregator go build -a metron
popd

pushd $DIEGO_RELEASE_DIR/src/github.com/coreos/etcd
    ./build
    cp -a bin/etcd $OUTPUT_DIR/brain/bin/
popd

pushd ${TMP_DIR}
    unzip consul.zip -d $OUTPUT_DIR/brain/bin/
    chmod +x $OUTPUT_DIR/brain/bin/consul

    tar xzf haproxy_pcre.tgz
    pushd pcre-8.37
        ./configure
        make && make install
    popd

    tar xzf haproxy.tgz
    pushd haproxy-1.5.14
        make TARGET=linux2628 USE_OPENSSL=1 USE_STATIC_PCRE=1
        cp -a haproxy $OUTPUT_DIR/brain/bin/
        chmod +x $OUTPUT_DIR/brain/bin/haproxy
    popd
popd

echo $LATTICE_VERSION > $OUTPUT_DIR/common/LATTICE_VERSION
cat $LATTICE_DIR/DIEGO_VERSION > $OUTPUT_DIR/common/DIEGO_VERSION
cat $LATTICE_DIR/CF_VERSION > $OUTPUT_DIR/common/CF_VERSION
cat $LATTICE_DIR/ROUTING_VERSION > $OUTPUT_DIR/common/ROUTING_VERSION
cat $LATTICE_DIR/STACK_VERSION > $OUTPUT_DIR/common/STACK_VERSION

tar czf "$1" -C $TMP_DIR lattice-build

rm -rf $TMP_DIR
