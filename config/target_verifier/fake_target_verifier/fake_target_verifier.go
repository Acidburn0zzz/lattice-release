// This file was generated by counterfeiter
package fake_target_verifier

import (
	"sync"

	"github.com/pivotal-cf-experimental/lattice-cli/config/target_verifier"
)

type FakeTargetVerifier struct {
	ValidateAuthorizationStub        func(name string) (bool, error)
	validateAuthorizationMutex       sync.RWMutex
	validateAuthorizationArgsForCall []struct {
		name string
	}
	validateAuthorizationReturns struct {
		result1 bool
		result2 error
	}
}

func (fake *FakeTargetVerifier) ValidateAuthorization(name string) (bool, error) {
	fake.validateAuthorizationMutex.Lock()
	fake.validateAuthorizationArgsForCall = append(fake.validateAuthorizationArgsForCall, struct {
		name string
	}{name})
	fake.validateAuthorizationMutex.Unlock()
	if fake.ValidateAuthorizationStub != nil {
		return fake.ValidateAuthorizationStub(name)
	} else {
		return fake.validateAuthorizationReturns.result1, fake.validateAuthorizationReturns.result2
	}
}

func (fake *FakeTargetVerifier) ValidateAuthorizationCallCount() int {
	fake.validateAuthorizationMutex.RLock()
	defer fake.validateAuthorizationMutex.RUnlock()
	return len(fake.validateAuthorizationArgsForCall)
}

func (fake *FakeTargetVerifier) ValidateAuthorizationArgsForCall(i int) string {
	fake.validateAuthorizationMutex.RLock()
	defer fake.validateAuthorizationMutex.RUnlock()
	return fake.validateAuthorizationArgsForCall[i].name
}

func (fake *FakeTargetVerifier) ValidateAuthorizationReturns(result1 bool, result2 error) {
	fake.ValidateAuthorizationStub = nil
	fake.validateAuthorizationReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

var _ target_verifier.TargetVerifier = new(FakeTargetVerifier)
